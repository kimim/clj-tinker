* maths
** add

#+begin_src clojure :results pp
  [(+)
   (+ 1)
   (+ 1 1)]
#+end_src

#+RESULTS:
: [0 1 2]

=>
#+outputs:
: [0 1 2]

** sub

#+begin_src clojure :results pp
  [(- 1)
   (- 2 1)
   (- 3 2 1)]
#+end_src
=>
#+outputs:
: [-1 1 0]

** multiply

#+begin_src clojure
[(*)
(* 1)
(* 2 3)]
#+end_src
=>
#+outputs:
: [1 1 6]

** divide

#+begin_src clojure
[(/ 1)
 (/ 2 1)
 (/ 1 2)]
#+end_src
=>
#+outputs:
: [1 2 1/2]

* str
** concat

=concat= is used for collections, so "hello world" is not the
expected result from this code:

#+begin_src clojure :results pp
(concat "hello" " " "world")
#+end_src
=>
#+outputs:
: (\h \e \l \l \o \space \w \o \r \l \d)

=str= is the correct way to concat strings:

#+begin_src clojure :results pp
(str "hello" " " "world")
#+end_src
=>
#+outputs:
: "hello world"

* list

#+begin_src clojure :results pp
  (let [v '(1 2 3)]
    [(get v 0)
     (first v)
     (rest v)
     (last v)])
#+end_src
=>
#+outputs:
: [nil 1 (2 3) 3]

* vector

Accessing vector:

#+begin_src clojure :results pp
  (let [v [1 2 3]]
    [(v 0)
     (get v 1)
     (first v)
     (rest v)
     (last v)])
#+end_src
=>
#+outputs:
: [1 2 1 (2 3) 3]

** test

#+begin_src clojure
[
 (clojure.core/vector? [])
 (coll? [])
 (counted? [])
 (sorted? [])
 (reversible? [])
 (sequential? [])
 (associative? [])
]
#+end_src
=>
#+outputs:
| true | true | true | false | true | true | true |

* map

#+begin_src clojure :results pp
  (let [m {:name "KM" :home "Hangzhou" "nick" "Kimi"}]
    [(keys m)
     (vals m)
     (m :name)
     (m "nick")
     (:home m)])
#+end_src
=>
#+outputs:
: [(:name :home "nick") ("KM" "Hangzhou" "Kimi") "KM" "Kimi" "Hangzhou"]

Update two key-value's in a map:

#+begin_src clojure
  (let [contact {:name "kimim" :home "Hangzhou"}
        new-name "ivy"]
    (assoc contact :modified? (not (= (contact :name) new-name)) :name new-name))
#+end_src

#+RESULTS:
| :name | ivy | :home | Hangzhou | :modified? | true |

#+begin_src clojure
(assoc [1 2 3] 2 10)
#+end_src

#+RESULTS:
| 1 | 2 | 10 |


#+begin_src clojure
  (def db [{:name "James" :age 26}  {:name "John" :age 43}])
  (-> db (assoc-in [1 :age] 44)
         (assoc-in [1 :tag] "happy"))
#+end_src

#+RESULTS:
: #'clj-tinker.core/db[{:name "James", :age 26} {:name "John", :age 44, :tag "happy"}]

* set
** set ops
#+begin_src clojure
  (let [s1 #{:k :i :m}
        s2 #{:i :v :y}]
     [(clojure.set/union s1 s2)
      (clojure.set/difference s1 s2)
      (clojure.set/difference s2 s1)
      (clojure.set/intersection s1 s2)
      (clojure.set/select even? #{1 2 3 4})])
#+end_src

#+outputs:
: '(#(:y :v :m :k :i) #(:m :k) #(:y :v) #(:i) #(4 2))
* version

#+begin_src clojure
  (clojure-version)
#+end_src
=>
#+outputs:
: 1.10.0
